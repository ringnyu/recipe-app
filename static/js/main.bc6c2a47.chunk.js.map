{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","dishType","image","ingredients","className","toFixed","src","alt","map","ingredient","text","foodId","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","uri","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAwBeA,EAtBA,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YAC/C,OACI,sBAAKC,UAAU,SAAf,UACI,6BAAKL,IACL,qBAAKK,UAAU,eAAf,SACA,8BACI,iCAAM,4CAAmBH,KAD7B,SAEI,iCAAM,2CAAkBD,EAASK,QAAQ,WAI7C,qBAAKC,IAAKJ,EAAOK,IAAI,GAAGH,UAAU,kBAClC,+BACI,qDACCD,EAAYK,KAAI,SAAAC,GAAU,OACvB,6BAA6BA,EAAWC,MAA/BD,EAAWE,kBCyCzBC,EAtDH,WACV,IAGA,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,WAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAW,WACTC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACQC,MAAK,8DAAyDL,EAAzD,mBAZjB,WAYiB,oBAXjB,qCAUI,cACTM,EADS,gBAEIA,EAASC,OAFb,OAETC,EAFS,OAGfX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJF,2CAAH,qDAkBhB,OACE,sBAAKvB,UAAU,MAAf,UACE,uBAAMA,UAAU,cAAc0B,SARhB,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKR,UACE,uBAAOb,UAAU,aAAa6B,KAAK,OAAOC,MAAOlB,EAAQmB,SAd1C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,OACnBN,QAAQC,IAAIb,MAaR,wBAAQZ,UAAU,gBAAgB6B,KAAK,SAAvC,uBAIF,qBAAK7B,UAAU,UAAf,SACGU,EAAQN,KAAI,SAAA6B,GAAM,OACf,cAAC,EAAD,CAEEtC,MAAOsC,EAAOA,OAAOC,MACrBtC,SAAUqC,EAAOA,OAAOrC,SACxBC,SAAUoC,EAAOA,OAAOpC,SACxBC,MAAOmC,EAAOA,OAAOnC,MACrBC,YAAakC,EAAOA,OAAOlC,aALxBkC,EAAOA,OAAOE,cCjChBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bc6c2a47.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Recipe = ({title, calories, dishType, image, ingredients}) => {\r\n    return (\r\n        <div className=\"recipe\">\r\n            <h1>{title}</h1>\r\n            <div className=\"dish-details\">\r\n            <p>\r\n                <span><b>Dish Type: </b>{dishType}</span>&emsp;\r\n                <span><b>Calories: </b>{calories.toFixed(2)}</span>\r\n            </p>\r\n            </div>\r\n            \r\n            <img src={image} alt=\"\" className=\"recipe__image\"/>\r\n            <ol>\r\n                <h2>List of Ingredients</h2>\r\n                {ingredients.map(ingredient => (\r\n                    <li key={ingredient.foodId}>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;","import React, {useEffect, useState} from 'react'\nimport './App.css';\nimport Recipe from './Recipe';\n\nconst App = () => {\n  const APP_ID = '511343b1';\n  const APP_KEY ='fdbe5ea2f9251cb42c31d80ce65e7e2d';\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken')\n\n  useEffect (()=>{\n    getRecipes();\n  }, [query])\n\n  const getRecipes = async () => {\n      const response = await fetch (`https://api.edamam.com/api/recipes/v2?type=public&q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n      const data = await response.json();\n      setRecipes(data.hits);\n      console.log(data.hits);\n  }\n \n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search)\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search)\n    setSearch('')\n\n  }\n  return (\n    <div className=\"App\">\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button> \n      </form>\n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n            <Recipe \n            key={recipe.recipe.uri}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              dishType={recipe.recipe.dishType}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n            />\n          ))} \n      </div>\n        \n    </div>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}